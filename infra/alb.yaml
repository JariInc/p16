AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  ALBCertificateArn:
    Type: String
    Description: ARN for ACM certificate to be used in load balancer
Resources:
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB Security Group
      VpcId: !ImportValue 'VPCid'
      Tags:
        - Key: Name
          Value: p16 ALB Security Group
  ALBSecurityGroup8086Inbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ALBSecurityGroup'
      IpProtocol: tcp
      FromPort: 8086
      ToPort: 8086
      CidrIp: 0.0.0.0/0
  ALBSecurityGroup443Inbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ALBSecurityGroup'
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0
  ECSALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ECSALB
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: 30
      Subnets: !Split [ "," , !ImportValue 'SubnetList']
      SecurityGroups: [!Ref 'ALBSecurityGroup']
  ALBListenerPort443:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref 'GrafanaTG'
      LoadBalancerArn: !Ref 'ECSALB'
      Port: 443
      Protocol: HTTPS
      Certificates:
      - CertificateArn: !Ref ALBCertificateArn
  ALBListenerPort8086:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref 'InfluxDBTG'
      LoadBalancerArn: !Ref 'ECSALB'
      Port: 8086
      Protocol: HTTPS
      Certificates:
      - CertificateArn: !Ref ALBCertificateArn
  # InfluxDB
  InfluxDBALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'InfluxDBTG'
      Conditions:
      - Field: host-header
        Values: [influxdb.*]
      ListenerArn: !Ref 'ALBListenerPort8086'
      Priority: 20
  InfluxDBTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ECSALB
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /ping
      HealthCheckProtocol: HTTP
      HealthCheckPort: traffic-port
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: 204
      Port: 8086
      Protocol: HTTP
      VpcId: !ImportValue 'VPCid'
  # Grafana
  GrafanaALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'GrafanaTG'
      Conditions:
      - Field: host-header
        Values: [grafana.*]
      ListenerArn: !Ref 'ALBListenerPort443'
      Priority: 10
  GrafanaTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ECSALB
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /api/health
      HealthCheckProtocol: HTTP
      HealthCheckPort: traffic-port
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      Port: 3000
      Protocol: HTTP
      VpcId: !ImportValue 'VPCid'
Outputs:
  LoadBalancerNameID:
    Value: !GetAtt ECSALB.CanonicalHostedZoneID
    Export:
      Name: ECSLoadBalancerZoneID
  LoadBalancerDNSName:
    Value: !GetAtt ECSALB.DNSName
    Export:
      Name: ECSLoadBalancerDNSName
  ALBSecurityGroup:
    Value: !Ref ALBSecurityGroup
    Export:
      Name: ALBSecurityGroupId
  InfluxDBTG:
    Value: !Ref InfluxDBTG
    Export:
      Name: InfluxDBTargetGroupARN
  GrafanaTG:
    Value: !Ref GrafanaTG
    Export:
      Name: GrafanaTargetGroupARN
