# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-ecs.html#quickref-ecs-example-1.yaml
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.
  ALBCertificateArn:
    Type: String
    Description: ARN for ACM certificate to be used in load balancer
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro, t2.small, t2.medium, t2.large, m3.medium, m3.large,
      m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
      c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, c3.large, c3.xlarge,
      c3.2xlarge, c3.4xlarge, c3.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge,
      r3.8xlarge, i2.xlarge, i2.2xlarge, i2.4xlarge, i2.8xlarge]
    ConstraintDescription: Please choose a valid instance type.
Mappings:
  AWSRegionToAMI:
    eu-west-1:
      AMIID: ami-0693ed7f
Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !ImportValue 'VPCid'
      Tags:
        - Key: Name
          Value: p16 ECS Security Group
  ECSsSecurityGroupHTTPSinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ECSSecurityGroup'
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0
  ECSsSecurityGroupInfluxDBinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ECSSecurityGroup'
      IpProtocol: tcp
      FromPort: 8086
      ToPort: 8086
      CidrIp: 0.0.0.0/0
  ECSSecurityGroupSSHinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ECSSecurityGroup'
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0
  ECSSecurityGroupALBports:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ECSSecurityGroup'
      IpProtocol: tcp
      FromPort: 32768   
      ToPort: 61000
      SourceSecurityGroupId: !Ref 'ECSSecurityGroup'
  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: ECSLogGroup-p16
      RetentionInDays: 14
  InfluxDBTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
      - Name: influxdb
        MemoryReservation: 300
        Essential: true
        Image: influxdb:1.4.3-alpine
        Environment:
        - Name: INFLUXDB_HTTP_AUTH_ENABLED
          Value: "true"
        - Name: INFLUXDB_ADMIN_USER
          Value: root
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref 'CloudWatchLogsGroup'
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: ecs-demo-app
        MountPoints:
        - ContainerPath: /var/lib/influxdb
          SourceVolume: influxdb-data
        PortMappings:
        - ContainerPort: 8086
      Volumes:
      - Name: influxdb-data
        Host: 
          SourcePath: /data/influxdb-data
  InfluxDBService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      Cluster: !Ref 'ECSCluster'
      DesiredCount: 1
      LoadBalancers:
      - ContainerName: influxdb
        ContainerPort: 8086
        TargetGroupArn: !Ref 'InfluxDBTG'
      Role: !Ref 'ECSServiceRole'
      TaskDefinition: !Ref 'InfluxDBTask'
  ECSALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ECSALB
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: 30
      Subnets: !Split [ "," , !ImportValue 'SubnetList']
      SecurityGroups: [!Ref 'ECSSecurityGroup']
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: ECSServiceRole
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref 'InfluxDBTG'
      LoadBalancerArn: !Ref 'ECSALB'
      Port: 8086
      Protocol: HTTPS
      Certificates:
      - CertificateArn: !Ref ALBCertificateArn
  InfluxDBALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: ALBListener
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'InfluxDBTG'
      Conditions:
      - Field: host-header
        Values: [influxdb.*]
      ListenerArn: !Ref 'ALBListener'
      Priority: 1
  InfluxDBTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ECSALB
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /ping
      HealthCheckProtocol: HTTP
      HealthCheckPort: traffic-port
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 204
      Port: 8086
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !ImportValue 'VPCid'
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Split [ "," , !ImportValue 'SubnetList']
      LaunchConfigurationName: !Ref 'ContainerInstances'
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'
  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [AWSRegionToAMI, !Ref 'AWS::Region', AMIID]
      SecurityGroups: [!Ref 'ECSSecurityGroup']
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      KeyName: !Ref 'KeyName'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['elasticloadbalancing:DeregisterInstancesFromLoadBalancer', 'elasticloadbalancing:DeregisterTargets',
              'elasticloadbalancing:Describe*', 'elasticloadbalancing:RegisterInstancesWithLoadBalancer',
              'elasticloadbalancing:RegisterTargets', 'ec2:Describe*', 'ec2:AuthorizeSecurityGroupIngress']
            Resource: '*'
#  ServiceScalingTarget:
#    Type: AWS::ApplicationAutoScaling::ScalableTarget
#    DependsOn: InfluxDBService
#    Properties:
#      MaxCapacity: 1
#      MinCapacity: 1
#      ResourceId: !Join ['', [service/, !Ref 'ECSCluster', /, !GetAtt [InfluxDBService, Name]]]
#      RoleARN: !GetAtt [AutoscalingRole, Arn]
#      ScalableDimension: ecs:service:DesiredCount
#      ServiceNamespace: ecs
  # ServiceScalingPolicy:
  #   Type: AWS::ApplicationAutoScaling::ScalingPolicy
  #   Properties:
  #     PolicyName: AStepPolicy
  #     PolicyType: StepScaling
  #     ScalingTargetId: !Ref 'ServiceScalingTarget'
  #     StepScalingPolicyConfiguration:
  #       AdjustmentType: PercentChangeInCapacity
  #       Cooldown: 60
  #       MetricAggregationType: Average
  #       StepAdjustments:
  #       - MetricIntervalLowerBound: 0
  #         ScalingAdjustment: 200
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['ecs:CreateCluster', 'ecs:DeregisterContainerInstance', 'ecs:DiscoverPollEndpoint',
              'ecs:Poll', 'ecs:RegisterContainerInstance', 'ecs:StartTelemetrySession',
              'ecs:Submit*', 'logs:CreateLogStream', 'logs:PutLogEvents']
            Resource: '*'
  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [application-autoscaling.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: service-autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['application-autoscaling:*', 'cloudwatch:DescribeAlarms', 'cloudwatch:PutMetricAlarm',
              'ecs:DescribeServices', 'ecs:UpdateService']
            Resource: '*'
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'EC2Role']
Outputs:
  LoadBalancerNameID:
    Value: !GetAtt ECSALB.CanonicalHostedZoneID
    Export:
      Name: ECSLoadBalancerZoneID
  LoadBalancerDNSName:
    Value: !GetAtt ECSALB.DNSName
    Export:
      Name: ECSLoadBalancerDNSName